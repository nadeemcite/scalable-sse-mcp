{{- if .Values.nginx.enabled | default false }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx.fullname" . }}-config
data:
  nginx.conf: |
    worker_processes 1;
    events { worker_connections 1024; }
    http {
      lua_package_path "/usr/local/openresty/lualib/?.lua;;";
      lua_shared_dict my_cache 10m;

      resolver 10.96.0.10 valid=30s;
      resolver_timeout 5s;

      proxy_buffering    off;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
      proxy_read_timeout 60s;
      send_timeout       60s;

      # ─────────────────────────────────────────
      # 1) Stateful upstream (session affinity)
      # ─────────────────────────────────────────
      upstream fastapi_hash {
        hash $arg_sessionid consistent;
        {{- $replicas := .Values.replicaCount | default 0 | int }}
        {{- range $i := until $replicas }}
        server {{ include "fastapi-stateful.fullname" $ }}-{{ $i }}.{{ include "fastapi-stateful.fullname" $ }}-headless.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.service.port }};
        {{- end }}
      }

      # ─────────────────────────────────────────
      # 2) Stateless upstream (round-robin)
      # ─────────────────────────────────────────
      upstream fastapi_lb {
        # Point to your ClusterIP Service for load-balanced traffic
        server {{ include "fastapi-stateful.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }};
      }

      server {
        listen {{ .Values.nginx.service.port }};
        set $target "";

        # ─────────────────────────────────────────
        # A) SSE under /mcp will still be stateful
        # ─────────────────────────────────────────
        location = /sse {
          proxy_pass http://fastapi_hash;  # use consistent-hash backend
          proxy_set_header Host              $host;
          proxy_set_header X-Real-IP         $remote_addr;
          proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

          header_filter_by_lua_block {
            ngx.ctx.sse_buf  = ""
            ngx.ctx.sse_done = false
          }
          body_filter_by_lua_block {
            local chunk = ngx.arg[1] or ""
            ngx.arg[1] = chunk
            if not ngx.ctx.sse_done then
              ngx.ctx.sse_buf = ngx.ctx.sse_buf .. chunk
              local data = ngx.ctx.sse_buf:match("event:%s*endpoint%s-[\r\n]+data:%s*(.-)[\r\n]+")
              if data then
                local sessionid = data:match("session_id=([%w%-]+)")
                if sessionid then
                  local upstream_addr = ngx.var.upstream_addr or "unknown"
                  ngx.timer.at(0, function(premature)
                    if premature then return end
                    local redis = require "resty.redis"
                    local r     = redis:new()
                    r:set_timeout(1000)
                    local ok, err = r:connect(
                      "{{ include "redis.fullname" . }}-master.{{ .Release.Namespace }}.svc.cluster.local",
                      {{ .Values.redis.port }}
                    )
                    if ok then r:setex(sessionid, 86400, upstream_addr)
                    else ngx.log(ngx.ERR, "[SSE] redis connect error: ", err) end
                  end)
                  ngx.ctx.sse_done = true
                end
              end
            end
          }
        }

        # ─────────────────────────────────────────
        # B) All other /mcp URLs are stateful
        # ─────────────────────────────────────────
        location ~ ^/(sse|messages)/ {
          content_by_lua_block {
            local redis = require "resty.redis"
            local r     = redis:new()
            r:set_timeout(1000)
            local ok, err = r:connect(
              "{{ include "redis.fullname" . }}-master.{{ .Release.Namespace }}.svc.cluster.local",
              {{ .Values.redis.port }}
            )
            if not ok then ngx.status = 500; ngx.say("Redis error: ", err); return end

            local sessionid = ngx.var.arg_session_id
            if not sessionid then ngx.status = 400; ngx.say("Missing sessionid"); return end

            local upstream = r:get(sessionid)
            if upstream == ngx.null or not upstream then
              ngx.status = 404; ngx.say("No upstream for sessionid"); return
            end

            ngx.var.target = "http://" .. upstream
            return ngx.exec("@proxy")
          }
        }

        # Internal proxy pass to either upstream group
        location @proxy {
          proxy_pass $target;
          proxy_set_header Host            $host;
          proxy_set_header X-Real-IP       $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # ─────────────────────────────────────────
        # C) Everything else: stateless load-balancing
        # ─────────────────────────────────────────
        location / {
          proxy_pass http://fastapi_lb;
          proxy_set_header Host            $host;
          proxy_set_header X-Real-IP       $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }
    }
{{- end }}